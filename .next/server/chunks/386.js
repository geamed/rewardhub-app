exports.id=386,exports.ids=[386],exports.modules={1621:(a,b,c)=>{"use strict";c.d(b,{N:()=>g});var d=c(3939);let e="https://gmiwizobjtjtjefhhjdp.supabase.co",f="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdtaXdpem9ianRqdGplZmhoamRwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk0OTk1NjQsImV4cCI6MjA2NTA3NTU2NH0.nesBY7rcq-wh8vr8MpjN6wIAFKOBAzLfIdHtCIf7Cws";if(!e||!f){let a="Supabase URL or Anon Key is missing. Please set SUPABASE_URL and SUPABASE_ANON_KEY environment variables, or update supabase.ts directly.";throw console.error(a),alert(a),Error(a)}let g=(0,d.createClient)(e,f)},2386:(a,b,c)=>{"use strict";c.r(b),c.d(b,{default:()=>f});var d=c(8732);c(4871);var e=c(8201);function f({Component:a,pageProps:b}){return(0,d.jsx)(e.O,{children:(0,d.jsx)(a,{...b})})}},4871:()=>{},6686:(a,b,c)=>{"use strict";c.d(b,{C3:()=>f,T9:()=>d,f0:()=>e,nN:()=>g,vE:()=>h});let d=1e3,e=5e3,f="RewardHub",g="aff45d70bffede70a0976194d02f",h="theyabto@gmail.com"},8201:(a,b,c)=>{"use strict";c.d(b,{A:()=>j,O:()=>i});var d=c(8732),e=c(2015),f=c(1621),g=c(6686);let h=(0,e.createContext)(void 0),i=({children:a})=>{let[b,c]=(0,e.useState)(null),[i,j]=(0,e.useState)(null),[k,l]=(0,e.useState)(!0),[m,n]=(0,e.useState)(!1),o=(0,e.useCallback)(async a=>{let b="fetchUserProfile";console.log(`AuthContext: ${b} START for user: ${a.id}`);try{let{data:c,error:d}=await f.N.from("profiles").select("*").eq("id",a.id).single();if(d&&"PGRST116"!==d.code)return console.error(`AuthContext: ${b} DB QUERY ERROR for user ${a.id}:`,d.message,d),null;return c?console.log(`AuthContext: ${b} SUCCESS for user ${a.id}. Profile data retrieved.`):console.log(`AuthContext: ${b} for user ${a.id} - NO PROFILE FOUND.`),c}catch(c){return console.error(`AuthContext: ${b} for user ${a.id} - UNEXPECTED ERROR in catch block:`,c.message,c),null}},[]),p=(0,e.useCallback)(async a=>{let b="createUserProfile";console.log(`AuthContext: ${b} START for new user: ${a.id}, email: ${a.email}`);let c=0;("theyabto@gmail.com"===a.email||"robuxwin24@gmail.com"===a.email)&&(c=5e5,console.log(`AuthContext: Test user ${a.email}. Initializing points to ${c}.`));let d={id:a.id,email:a.email??null,points:c,country_code:null,postal_code:null};try{let{data:c,error:e}=await f.N.from("profiles").insert([d]).select().single();if(e)return console.error(`AuthContext: ${b} DB INSERT ERROR for user ${a.id}:`,e.message,e),null;return console.log(`AuthContext: ${b} SUCCESS for user ${a.id}. Profile data:`,c),c}catch(c){return console.error(`AuthContext: ${b} for user ${a.id} - UNEXPECTED ERROR in catch block:`,c.message,c),null}},[]);(0,e.useEffect)(()=>{console.log("AuthContext: useEffect for onAuthStateChange - MOUNTING. Initial isLoading state:",k);let{data:a}=f.N.auth.onAuthStateChange(async(a,b)=>{console.log(`AuthContext: onAuthStateChange --- EVENT: ${a} --- User ID: ${b?.user?.id}. Email Confirmed: ${b?.user?.email_confirmed_at}. isLoading at start of callback: ${k}`),l(!0);let d=null,e=null;try{(d=b?.user)?(console.log(`AuthContext: [${a}] User session found for ${d.id}. Setting currentUser object.`),c(d),n(d.email===g.vE),d.email_confirmed_at?(console.log(`AuthContext: [${a}] Email CONFIRMED for ${d.id}. Attempting to fetch profile.`),e=await o(d),console.log(`AuthContext: [${a}] AFTER await fetchUserProfile for ${d.id}. Profile ${e?"FOUND/EXISTS":"NOT FOUND/NULL"}.`),e||"SIGNED_IN"!==a&&"INITIAL_SESSION"!==a&&"USER_UPDATED"!==a||(console.log(`AuthContext: [${a}] Profile NOT FOUND for ${d.id}, email confirmed, and event is appropriate for creation. Attempting to create profile.`),e=await p(d),console.log(`AuthContext: [${a}] AFTER await createUserProfile for ${d.id}. Profile ${e?"CREATED":"NOT CREATED (or creation failed)"}.`)),console.log(`AuthContext: [${a}] Setting currentUserProfile for ${d.id}. Profile object determined in this scope is: ${e?"exists":"null"}`),j(e)):(console.log(`AuthContext: [${a}] Email NOT YET CONFIRMED for ${d.id}. Not fetching/creating profile. currentUserProfile will be null.`),j(null))):(console.log(`AuthContext: [${a}] No user session. Clearing user, profile, and admin status.`),c(null),j(null),n(!1))}catch(b){console.error(`AuthContext: [${a}] CRITICAL ERROR in onAuthStateChange outer try/catch block:`,b.message,b),c(null),j(null),n(!1)}finally{console.log(`AuthContext: [${a}] FINALLY block. User processed in this event: ${d?.id||"none"}. Profile determined in this event: ${e?e.id:"null"}. Setting isLoading to FALSE.`),l(!1)}});return()=>{console.log("AuthContext: useEffect for onAuthStateChange - UNMOUNTING. Unsubscribing listener."),a.subscription.unsubscribe()}},[o,p]);let q=(0,e.useCallback)(async(a,b)=>{console.log("AuthContext: login attempt for",a);let{data:c,error:d}=await f.N.auth.signInWithPassword({email:a,password:b});return d?console.error("AuthContext: Supabase Login Error:",d.message,d):c.user&&!c.user.email_confirmed_at?console.warn("AuthContext: Login successful for",a,"but email not confirmed."):console.log("AuthContext: signInWithPassword successful for",a,"User:",c.user?.id),{error:d}},[]),r=(0,e.useCallback)(async(a,b)=>{console.log("AuthContext: signup attempt for",a);let{data:c,error:d}=await f.N.auth.signUp({email:a,password:b});return d?console.error("AuthContext: Supabase Signup Error:",d.message,d):console.log("AuthContext: signUp successful for",a,"User:",c.user?.id,"Session after signup:",c.session),{error:d,user:c?.user||null,session:c?.session||null}},[]),s=(0,e.useCallback)(async a=>{console.log("AuthContext: Resending verification email to",a);let{data:b,error:c}=await f.N.auth.resend({type:"signup",email:a});return c?console.error("AuthContext: Error resending verification email:",c.message,c):console.log("AuthContext: Verification email resent successfully (or user already confirmed/doesn't exist). Data:",b),{error:c}},[]),t=(0,e.useCallback)(async()=>{console.log("AuthContext: Attempting Supabase sign out..."),l(!0);let a=null;try{let{error:b}=await f.N.auth.signOut();a=b,b?console.error("AuthContext: Supabase Logout Error:",b.message,b):console.log("AuthContext: Supabase signOut() call completed successfully.")}catch(b){console.error("AuthContext: Unexpected error during supabase.auth.signOut() execution:",b),a={name:"SignOutFailedError",message:b.message||"Unknown error during sign out"}}finally{console.log("AuthContext: Logout finally block. supabase.auth.signOut() finished. onAuthStateChange will handle user state. Setting isLoading to false as a safeguard if onAuthStateChange doesn't fire as expected or quickly enough."),c(null),j(null),n(!1),l(!1)}return{error:a}},[]),u=(0,e.useCallback)(async a=>{let c="updatePointsInContext";if(!b)return console.warn(`AuthContext: ${c} called but no currentUser.`),!1;console.log(`AuthContext: ${c} for user ${b.id} to ${a}`);try{let{data:d,error:e}=await f.N.from("profiles").update({points:a,updated_at:new Date().toISOString()}).eq("id",b.id).select().single();if(e)return console.error(`AuthContext: Error ${c}:`,e.message,e),!1;if(d)return j(d),console.log(`AuthContext: ${c} successful, new profile:`,d),!0}catch(a){console.error(`AuthContext: ${c} for user ${b.id} - UNEXPECTED ERROR:`,a.message,a)}return!1},[b]),v=(0,e.useCallback)(async(a,c)=>{let d="updateUserDemographics";if(!b)return console.warn(`AuthContext: ${d} called but no currentUser.`),!1;console.log(`AuthContext: ${d} for user ${b.id} with country=${a}, postal=${c}`);try{let{error:e}=await f.N.from("profiles").update({country_code:a,postal_code:c,updated_at:new Date().toISOString()}).eq("id",b.id);if(e)return console.error(`AuthContext: Error during ${d} .update():`,e.message,e),!1;console.log(`AuthContext: ${d} .update() successful. Re-fetching profile to update state.`);let g=await o(b);if(g)return j(g),console.log(`AuthContext: ${d} re-fetch successful, context updated.`),!0;return console.error(`AuthContext: ${d} update was successful, but re-fetching the profile failed. The UI might be stale.`),!0}catch(a){return console.error(`AuthContext: ${d} for user ${b.id} - UNEXPECTED ERROR in catch block:`,a.message,a),!1}},[b,o]),w=(0,e.useCallback)(async a=>{let c="addWithdrawalRequestToContext";if(!b||!i)return console.warn(`AuthContext: ${c} called but no currentUser or profile.`),{request:null,error:Error("User not logged in or profile not loaded.")};let d=a.points/g.T9,e={user_id:b.id,paypal_email:a.paypal_email,points:a.points,amount_usd:d,status:a.status,rejection_reason:a.rejection_reason};console.log(`AuthContext: ${c} adding withdrawal request:`,e);try{let{data:b,error:d}=await f.N.from("withdrawal_requests").insert([e]).select().single();if(d)return console.error(`AuthContext: Error ${c}:`,d.message,d),{request:null,error:d};console.log(`AuthContext: ${c} withdrawal request added successfully:`,b);let g=i.points-a.points;return await u(g)||console.error(`AuthContext: CRITICAL - ${c} - Withdrawal request created but failed to deduct points.`),{request:b,error:null}}catch(d){let a=`AuthContext: ${c} for user ${b.id} - UNEXPECTED ERROR: ${d instanceof Error?d.message:String(d)}`;return console.error(a,d),{request:null,error:d instanceof Error?d:Error(a)}}},[b,i,u]),x=(0,e.useCallback)(async()=>{let a="getAllUsersWithdrawalRequests";if(!m)return[];console.log(`AuthContext (Admin): ${a} fetching all withdrawal requests.`);try{let{data:b,error:c}=await f.N.from("withdrawal_requests").select("*, profiles(email)").order("created_at",{ascending:!1});if(c)return console.error(`AuthContext (Admin): Error ${a} fetching requests:`,c.message,c),[];if(!b||0===b.length)return[];let d=b.map(a=>({id:a.id,userId:a.user_id,userEmail:a.profiles?.email||"Unknown Email",created_at:a.created_at,paypal_email:a.paypal_email,points:a.points,amount_usd:a.amount_usd,status:a.status,rejection_reason:a.rejection_reason}));return console.log(`AuthContext (Admin): ${a} fetched:`,d.length),d}catch(b){return console.error(`AuthContext (Admin): ${a} - UNEXPECTED ERROR:`,b.message,b),[]}},[m]),y=(0,e.useCallback)(async(a,b,c,d)=>{let e="updateUserWithdrawalRequestStatus";if(!m)return!1;console.log(`AuthContext (Admin): ${e} for request ${b}, user ${a} to status ${c}`);try{let{data:g,error:h}=await f.N.from("withdrawal_requests").select("points, status").eq("id",b).eq("user_id",a).single();if(h||!g)return console.error(`AuthContext (Admin): Error ${e} fetching request or request not found:`,h?.message,h),!1;let i={status:c};"Rejected"===c?i.rejection_reason=d:i.rejection_reason=null;let{error:j}=await f.N.from("withdrawal_requests").update(i).eq("id",b).eq("user_id",a);if(j)return console.error(`AuthContext (Admin): Error ${e} updating status:`,j.message,j),!1;let k="Rejected"===c&&"Rejected"!==g.status,l="Rejected"!==c&&"Rejected"===g.status;if(k||l){let{data:b,error:c}=await f.N.from("profiles").select("points").eq("id",a).single();if(c||!b)console.error(`AuthContext (Admin): Error ${e} fetching profile for points adjustment:`,c?.message,c);else{let c=0;k?c=g.points:l&&(c=-g.points);let d=b.points+c,{error:h}=await f.N.from("profiles").update({points:d<0?0:d}).eq("id",a);h?console.error(`AuthContext (Admin): Error ${e} ${k?"refunding":"deducting"} points:`,h.message,h):console.log(`AuthContext (Admin): ${e} ${k?"Refunded":"Deducted"} ${Math.abs(c)} points to/from user ${a}.`)}}return console.log(`AuthContext (Admin): ${e} for request ${b} status updated successfully.`),!0}catch(a){return console.error(`AuthContext (Admin): ${e} - UNEXPECTED ERROR:`,a.message,a),!1}},[m]);return(0,d.jsx)(h.Provider,{value:{currentUser:b,currentUserProfile:i,isLoading:k,isAdmin:m,login:q,signup:r,logout:t,resendVerificationEmail:s,addWithdrawalRequestToContext:w,updatePointsInContext:u,updateUserDemographics:v,getAllUsersWithdrawalRequests:x,updateUserWithdrawalRequestStatus:y},children:a})},j=()=>{let a=(0,e.useContext)(h);if(void 0===a)throw Error("useAuth must be used within an AuthProvider");return a}}};